// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.72
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace AdventureWorks.Business.Entities
{

    using System.Linq;
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public partial class AdventureWorksDB : System.Data.Entity.DbContext, IAdventureWorksDB
    {
        public System.Data.Entity.DbSet<Address> Addresses { get; set; } // Address
        public System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; } // AddressType
        public System.Data.Entity.DbSet<AwBuildVersion> AwBuildVersions { get; set; } // AWBuildVersion
        public System.Data.Entity.DbSet<BillOfMaterial> BillOfMaterials { get; set; } // BillOfMaterials
        public System.Data.Entity.DbSet<BusinessEntity> BusinessEntities { get; set; } // BusinessEntity
        public System.Data.Entity.DbSet<BusinessEntityAddress> BusinessEntityAddresses { get; set; } // BusinessEntityAddress
        public System.Data.Entity.DbSet<BusinessEntityContact> BusinessEntityContacts { get; set; } // BusinessEntityContact
        public System.Data.Entity.DbSet<ContactType> ContactTypes { get; set; } // ContactType
        public System.Data.Entity.DbSet<CountryRegion> CountryRegions { get; set; } // CountryRegion
        public System.Data.Entity.DbSet<CountryRegionCurrency> CountryRegionCurrencies { get; set; } // CountryRegionCurrency
        public System.Data.Entity.DbSet<CreditCard> CreditCards { get; set; } // CreditCard
        public System.Data.Entity.DbSet<Culture> Cultures { get; set; } // Culture
        public System.Data.Entity.DbSet<Currency> Currencies { get; set; } // Currency
        public System.Data.Entity.DbSet<CurrencyRate> CurrencyRates { get; set; } // CurrencyRate
        public System.Data.Entity.DbSet<Customer> Customers { get; set; } // Customer
        public System.Data.Entity.DbSet<DatabaseLog> DatabaseLogs { get; set; } // DatabaseLog
        public System.Data.Entity.DbSet<Department> Departments { get; set; } // Department
        public System.Data.Entity.DbSet<Document> Documents { get; set; } // Document
        public System.Data.Entity.DbSet<EmailAddress> EmailAddresses { get; set; } // EmailAddress
        public System.Data.Entity.DbSet<Employee> Employees { get; set; } // Employee
        public System.Data.Entity.DbSet<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory
        public System.Data.Entity.DbSet<EmployeePayHistory> EmployeePayHistories { get; set; } // EmployeePayHistory
        public System.Data.Entity.DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        public System.Data.Entity.DbSet<Illustration> Illustrations { get; set; } // Illustration
        public System.Data.Entity.DbSet<JobCandidate> JobCandidates { get; set; } // JobCandidate
        public System.Data.Entity.DbSet<Location> Locations { get; set; } // Location
        public System.Data.Entity.DbSet<Password> Passwords { get; set; } // Password
        public System.Data.Entity.DbSet<Person> People { get; set; } // Person
        public System.Data.Entity.DbSet<PersonCreditCard> PersonCreditCards { get; set; } // PersonCreditCard
        public System.Data.Entity.DbSet<PersonPhone> PersonPhones { get; set; } // PersonPhone
        public System.Data.Entity.DbSet<PhoneNumberType> PhoneNumberTypes { get; set; } // PhoneNumberType
        public System.Data.Entity.DbSet<Product> Products { get; set; } // Product
        public System.Data.Entity.DbSet<ProductCategory> ProductCategories { get; set; } // ProductCategory
        public System.Data.Entity.DbSet<ProductCostHistory> ProductCostHistories { get; set; } // ProductCostHistory
        public System.Data.Entity.DbSet<ProductDescription> ProductDescriptions { get; set; } // ProductDescription
        public System.Data.Entity.DbSet<ProductDocument> ProductDocuments { get; set; } // ProductDocument
        public System.Data.Entity.DbSet<ProductInventory> ProductInventories { get; set; } // ProductInventory
        public System.Data.Entity.DbSet<ProductListPriceHistory> ProductListPriceHistories { get; set; } // ProductListPriceHistory
        public System.Data.Entity.DbSet<ProductModel> ProductModels { get; set; } // ProductModel
        public System.Data.Entity.DbSet<ProductModelIllustration> ProductModelIllustrations { get; set; } // ProductModelIllustration
        public System.Data.Entity.DbSet<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; } // ProductModelProductDescriptionCulture
        public System.Data.Entity.DbSet<ProductPhoto> ProductPhotos { get; set; } // ProductPhoto
        public System.Data.Entity.DbSet<ProductProductPhoto> ProductProductPhotos { get; set; } // ProductProductPhoto
        public System.Data.Entity.DbSet<ProductReview> ProductReviews { get; set; } // ProductReview
        public System.Data.Entity.DbSet<ProductSubcategory> ProductSubcategories { get; set; } // ProductSubcategory
        public System.Data.Entity.DbSet<ProductVendor> ProductVendors { get; set; } // ProductVendor
        public System.Data.Entity.DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; } // PurchaseOrderDetail
        public System.Data.Entity.DbSet<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader
        public System.Data.Entity.DbSet<SalesOrderDetail> SalesOrderDetails { get; set; } // SalesOrderDetail
        public System.Data.Entity.DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader
        public System.Data.Entity.DbSet<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason
        public System.Data.Entity.DbSet<SalesPerson> SalesPeople { get; set; } // SalesPerson
        public System.Data.Entity.DbSet<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; } // SalesPersonQuotaHistory
        public System.Data.Entity.DbSet<SalesReason> SalesReasons { get; set; } // SalesReason
        public System.Data.Entity.DbSet<SalesTaxRate> SalesTaxRates { get; set; } // SalesTaxRate
        public System.Data.Entity.DbSet<SalesTerritory> SalesTerritories { get; set; } // SalesTerritory
        public System.Data.Entity.DbSet<SalesTerritoryHistory> SalesTerritoryHistories { get; set; } // SalesTerritoryHistory
        public System.Data.Entity.DbSet<ScrapReason> ScrapReasons { get; set; } // ScrapReason
        public System.Data.Entity.DbSet<Shift> Shifts { get; set; } // Shift
        public System.Data.Entity.DbSet<ShipMethod> ShipMethods { get; set; } // ShipMethod
        public System.Data.Entity.DbSet<ShoppingCartItem> ShoppingCartItems { get; set; } // ShoppingCartItem
        public System.Data.Entity.DbSet<SpecialOffer> SpecialOffers { get; set; } // SpecialOffer
        public System.Data.Entity.DbSet<SpecialOfferProduct> SpecialOfferProducts { get; set; } // SpecialOfferProduct
        public System.Data.Entity.DbSet<StateProvince> StateProvinces { get; set; } // StateProvince
        public System.Data.Entity.DbSet<Store> Stores { get; set; } // Store
        public System.Data.Entity.DbSet<TransactionHistory> TransactionHistories { get; set; } // TransactionHistory
        public System.Data.Entity.DbSet<TransactionHistoryArchive> TransactionHistoryArchives { get; set; } // TransactionHistoryArchive
        public System.Data.Entity.DbSet<UnitMeasure> UnitMeasures { get; set; } // UnitMeasure
        public System.Data.Entity.DbSet<VAdditionalContactInfo> VAdditionalContactInfos { get; set; } // vAdditionalContactInfo
        public System.Data.Entity.DbSet<VEmployee> VEmployees { get; set; } // vEmployee
        public System.Data.Entity.DbSet<VEmployeeDepartment> VEmployeeDepartments { get; set; } // vEmployeeDepartment
        public System.Data.Entity.DbSet<VEmployeeDepartmentHistory> VEmployeeDepartmentHistories { get; set; } // vEmployeeDepartmentHistory
        public System.Data.Entity.DbSet<Vendor> Vendors { get; set; } // Vendor
        public System.Data.Entity.DbSet<VIndividualCustomer> VIndividualCustomers { get; set; } // vIndividualCustomer
        public System.Data.Entity.DbSet<VJobCandidate> VJobCandidates { get; set; } // vJobCandidate
        public System.Data.Entity.DbSet<VJobCandidateEducation> VJobCandidateEducations { get; set; } // vJobCandidateEducation
        public System.Data.Entity.DbSet<VJobCandidateEmployment> VJobCandidateEmployments { get; set; } // vJobCandidateEmployment
        public System.Data.Entity.DbSet<VPersonDemographic> VPersonDemographics { get; set; } // vPersonDemographics
        public System.Data.Entity.DbSet<VProductAndDescription> VProductAndDescriptions { get; set; } // vProductAndDescription
        public System.Data.Entity.DbSet<VProductModelCatalogDescription> VProductModelCatalogDescriptions { get; set; } // vProductModelCatalogDescription
        public System.Data.Entity.DbSet<VProductModelInstruction> VProductModelInstructions { get; set; } // vProductModelInstructions
        public System.Data.Entity.DbSet<VSalesPerson> VSalesPeople { get; set; } // vSalesPerson
        public System.Data.Entity.DbSet<VSalesPersonSalesByFiscalYear> VSalesPersonSalesByFiscalYears { get; set; } // vSalesPersonSalesByFiscalYears
        public System.Data.Entity.DbSet<VStateProvinceCountryRegion> VStateProvinceCountryRegions { get; set; } // vStateProvinceCountryRegion
        public System.Data.Entity.DbSet<VStoreWithAddress> VStoreWithAddresses { get; set; } // vStoreWithAddresses
        public System.Data.Entity.DbSet<VStoreWithContact> VStoreWithContacts { get; set; } // vStoreWithContacts
        public System.Data.Entity.DbSet<VStoreWithDemographic> VStoreWithDemographics { get; set; } // vStoreWithDemographics
        public System.Data.Entity.DbSet<VVendorWithAddress> VVendorWithAddresses { get; set; } // vVendorWithAddresses
        public System.Data.Entity.DbSet<VVendorWithContact> VVendorWithContacts { get; set; } // vVendorWithContacts
        public System.Data.Entity.DbSet<WorkOrder> WorkOrders { get; set; } // WorkOrder
        public System.Data.Entity.DbSet<WorkOrderRouting> WorkOrderRoutings { get; set; } // WorkOrderRouting

        static AdventureWorksDB()
        {
            System.Data.Entity.Database.SetInitializer<AdventureWorksDB>(null);
        }

        public AdventureWorksDB() : base("Name=AdventureWorks")
        {
            InitializePartial();
        }

        public AdventureWorksDB(string connectionString) : base(connectionString)
        {
            InitializePartial();
        }

        public AdventureWorksDB(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
            InitializePartial();
        }

        public AdventureWorksDB(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection) : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public AdventureWorksDB(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection) : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        public AdventureWorksDB(System.Data.Entity.Core.Objects.ObjectContext objectContext, bool dbContextOwnsObjectContext) : base(objectContext, dbContextOwnsObjectContext)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            DisposePartial(disposing);
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AddressConfiguration());
            modelBuilder.Configurations.Add(new AddressTypeConfiguration());
            modelBuilder.Configurations.Add(new AwBuildVersionConfiguration());
            modelBuilder.Configurations.Add(new BillOfMaterialConfiguration());
            modelBuilder.Configurations.Add(new BusinessEntityConfiguration());
            modelBuilder.Configurations.Add(new BusinessEntityAddressConfiguration());
            modelBuilder.Configurations.Add(new BusinessEntityContactConfiguration());
            modelBuilder.Configurations.Add(new ContactTypeConfiguration());
            modelBuilder.Configurations.Add(new CountryRegionConfiguration());
            modelBuilder.Configurations.Add(new CountryRegionCurrencyConfiguration());
            modelBuilder.Configurations.Add(new CreditCardConfiguration());
            modelBuilder.Configurations.Add(new CultureConfiguration());
            modelBuilder.Configurations.Add(new CurrencyConfiguration());
            modelBuilder.Configurations.Add(new CurrencyRateConfiguration());
            modelBuilder.Configurations.Add(new CustomerConfiguration());
            modelBuilder.Configurations.Add(new DatabaseLogConfiguration());
            modelBuilder.Configurations.Add(new DepartmentConfiguration());
            modelBuilder.Configurations.Add(new DocumentConfiguration());
            modelBuilder.Configurations.Add(new EmailAddressConfiguration());
            modelBuilder.Configurations.Add(new EmployeeConfiguration());
            modelBuilder.Configurations.Add(new EmployeeDepartmentHistoryConfiguration());
            modelBuilder.Configurations.Add(new EmployeePayHistoryConfiguration());
            modelBuilder.Configurations.Add(new ErrorLogConfiguration());
            modelBuilder.Configurations.Add(new IllustrationConfiguration());
            modelBuilder.Configurations.Add(new JobCandidateConfiguration());
            modelBuilder.Configurations.Add(new LocationConfiguration());
            modelBuilder.Configurations.Add(new PasswordConfiguration());
            modelBuilder.Configurations.Add(new PersonConfiguration());
            modelBuilder.Configurations.Add(new PersonCreditCardConfiguration());
            modelBuilder.Configurations.Add(new PersonPhoneConfiguration());
            modelBuilder.Configurations.Add(new PhoneNumberTypeConfiguration());
            modelBuilder.Configurations.Add(new ProductConfiguration());
            modelBuilder.Configurations.Add(new ProductCategoryConfiguration());
            modelBuilder.Configurations.Add(new ProductCostHistoryConfiguration());
            modelBuilder.Configurations.Add(new ProductDescriptionConfiguration());
            modelBuilder.Configurations.Add(new ProductDocumentConfiguration());
            modelBuilder.Configurations.Add(new ProductInventoryConfiguration());
            modelBuilder.Configurations.Add(new ProductListPriceHistoryConfiguration());
            modelBuilder.Configurations.Add(new ProductModelConfiguration());
            modelBuilder.Configurations.Add(new ProductModelIllustrationConfiguration());
            modelBuilder.Configurations.Add(new ProductModelProductDescriptionCultureConfiguration());
            modelBuilder.Configurations.Add(new ProductPhotoConfiguration());
            modelBuilder.Configurations.Add(new ProductProductPhotoConfiguration());
            modelBuilder.Configurations.Add(new ProductReviewConfiguration());
            modelBuilder.Configurations.Add(new ProductSubcategoryConfiguration());
            modelBuilder.Configurations.Add(new ProductVendorConfiguration());
            modelBuilder.Configurations.Add(new PurchaseOrderDetailConfiguration());
            modelBuilder.Configurations.Add(new PurchaseOrderHeaderConfiguration());
            modelBuilder.Configurations.Add(new SalesOrderDetailConfiguration());
            modelBuilder.Configurations.Add(new SalesOrderHeaderConfiguration());
            modelBuilder.Configurations.Add(new SalesOrderHeaderSalesReasonConfiguration());
            modelBuilder.Configurations.Add(new SalesPersonConfiguration());
            modelBuilder.Configurations.Add(new SalesPersonQuotaHistoryConfiguration());
            modelBuilder.Configurations.Add(new SalesReasonConfiguration());
            modelBuilder.Configurations.Add(new SalesTaxRateConfiguration());
            modelBuilder.Configurations.Add(new SalesTerritoryConfiguration());
            modelBuilder.Configurations.Add(new SalesTerritoryHistoryConfiguration());
            modelBuilder.Configurations.Add(new ScrapReasonConfiguration());
            modelBuilder.Configurations.Add(new ShiftConfiguration());
            modelBuilder.Configurations.Add(new ShipMethodConfiguration());
            modelBuilder.Configurations.Add(new ShoppingCartItemConfiguration());
            modelBuilder.Configurations.Add(new SpecialOfferConfiguration());
            modelBuilder.Configurations.Add(new SpecialOfferProductConfiguration());
            modelBuilder.Configurations.Add(new StateProvinceConfiguration());
            modelBuilder.Configurations.Add(new StoreConfiguration());
            modelBuilder.Configurations.Add(new TransactionHistoryConfiguration());
            modelBuilder.Configurations.Add(new TransactionHistoryArchiveConfiguration());
            modelBuilder.Configurations.Add(new UnitMeasureConfiguration());
            modelBuilder.Configurations.Add(new VAdditionalContactInfoConfiguration());
            modelBuilder.Configurations.Add(new VEmployeeConfiguration());
            modelBuilder.Configurations.Add(new VEmployeeDepartmentConfiguration());
            modelBuilder.Configurations.Add(new VEmployeeDepartmentHistoryConfiguration());
            modelBuilder.Configurations.Add(new VendorConfiguration());
            modelBuilder.Configurations.Add(new VIndividualCustomerConfiguration());
            modelBuilder.Configurations.Add(new VJobCandidateConfiguration());
            modelBuilder.Configurations.Add(new VJobCandidateEducationConfiguration());
            modelBuilder.Configurations.Add(new VJobCandidateEmploymentConfiguration());
            modelBuilder.Configurations.Add(new VPersonDemographicConfiguration());
            modelBuilder.Configurations.Add(new VProductAndDescriptionConfiguration());
            modelBuilder.Configurations.Add(new VProductModelCatalogDescriptionConfiguration());
            modelBuilder.Configurations.Add(new VProductModelInstructionConfiguration());
            modelBuilder.Configurations.Add(new VSalesPersonConfiguration());
            modelBuilder.Configurations.Add(new VSalesPersonSalesByFiscalYearConfiguration());
            modelBuilder.Configurations.Add(new VStateProvinceCountryRegionConfiguration());
            modelBuilder.Configurations.Add(new VStoreWithAddressConfiguration());
            modelBuilder.Configurations.Add(new VStoreWithContactConfiguration());
            modelBuilder.Configurations.Add(new VStoreWithDemographicConfiguration());
            modelBuilder.Configurations.Add(new VVendorWithAddressConfiguration());
            modelBuilder.Configurations.Add(new VVendorWithContactConfiguration());
            modelBuilder.Configurations.Add(new WorkOrderConfiguration());
            modelBuilder.Configurations.Add(new WorkOrderRoutingConfiguration());
            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new AddressTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AwBuildVersionConfiguration(schema));
            modelBuilder.Configurations.Add(new BillOfMaterialConfiguration(schema));
            modelBuilder.Configurations.Add(new BusinessEntityConfiguration(schema));
            modelBuilder.Configurations.Add(new BusinessEntityAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new BusinessEntityContactConfiguration(schema));
            modelBuilder.Configurations.Add(new ContactTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryRegionCurrencyConfiguration(schema));
            modelBuilder.Configurations.Add(new CreditCardConfiguration(schema));
            modelBuilder.Configurations.Add(new CultureConfiguration(schema));
            modelBuilder.Configurations.Add(new CurrencyConfiguration(schema));
            modelBuilder.Configurations.Add(new CurrencyRateConfiguration(schema));
            modelBuilder.Configurations.Add(new CustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new DatabaseLogConfiguration(schema));
            modelBuilder.Configurations.Add(new DepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new DocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new EmailAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeeConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeeDepartmentHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeePayHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ErrorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new IllustrationConfiguration(schema));
            modelBuilder.Configurations.Add(new JobCandidateConfiguration(schema));
            modelBuilder.Configurations.Add(new LocationConfiguration(schema));
            modelBuilder.Configurations.Add(new PasswordConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonCreditCardConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonPhoneConfiguration(schema));
            modelBuilder.Configurations.Add(new PhoneNumberTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductCostHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductInventoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductListPriceHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductModelConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductModelIllustrationConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductModelProductDescriptionCultureConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductPhotoConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductProductPhotoConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductReviewConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductSubcategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductVendorConfiguration(schema));
            modelBuilder.Configurations.Add(new PurchaseOrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new PurchaseOrderHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesOrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesOrderHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesOrderHeaderSalesReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesPersonConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesPersonQuotaHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesTaxRateConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesTerritoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesTerritoryHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ScrapReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new ShiftConfiguration(schema));
            modelBuilder.Configurations.Add(new ShipMethodConfiguration(schema));
            modelBuilder.Configurations.Add(new ShoppingCartItemConfiguration(schema));
            modelBuilder.Configurations.Add(new SpecialOfferConfiguration(schema));
            modelBuilder.Configurations.Add(new SpecialOfferProductConfiguration(schema));
            modelBuilder.Configurations.Add(new StateProvinceConfiguration(schema));
            modelBuilder.Configurations.Add(new StoreConfiguration(schema));
            modelBuilder.Configurations.Add(new TransactionHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new TransactionHistoryArchiveConfiguration(schema));
            modelBuilder.Configurations.Add(new UnitMeasureConfiguration(schema));
            modelBuilder.Configurations.Add(new VAdditionalContactInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new VEmployeeConfiguration(schema));
            modelBuilder.Configurations.Add(new VEmployeeDepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new VEmployeeDepartmentHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new VendorConfiguration(schema));
            modelBuilder.Configurations.Add(new VIndividualCustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new VJobCandidateConfiguration(schema));
            modelBuilder.Configurations.Add(new VJobCandidateEducationConfiguration(schema));
            modelBuilder.Configurations.Add(new VJobCandidateEmploymentConfiguration(schema));
            modelBuilder.Configurations.Add(new VPersonDemographicConfiguration(schema));
            modelBuilder.Configurations.Add(new VProductAndDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new VProductModelCatalogDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new VProductModelInstructionConfiguration(schema));
            modelBuilder.Configurations.Add(new VSalesPersonConfiguration(schema));
            modelBuilder.Configurations.Add(new VSalesPersonSalesByFiscalYearConfiguration(schema));
            modelBuilder.Configurations.Add(new VStateProvinceCountryRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new VStoreWithAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new VStoreWithContactConfiguration(schema));
            modelBuilder.Configurations.Add(new VStoreWithDemographicConfiguration(schema));
            modelBuilder.Configurations.Add(new VVendorWithAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new VVendorWithContactConfiguration(schema));
            modelBuilder.Configurations.Add(new WorkOrderConfiguration(schema));
            modelBuilder.Configurations.Add(new WorkOrderRoutingConfiguration(schema));
            OnCreateModelPartial(modelBuilder, schema);
            return modelBuilder;
        }
        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
        static partial void OnCreateModelPartial(System.Data.Entity.DbModelBuilder modelBuilder, string schema);


        // Stored Procedures
        public System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return UspGetBillOfMaterials(startProductId, checkDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate, out int procResult)
        {
            var startProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startProductId.HasValue)
                startProductIdParam.Value = System.DBNull.Value;

            var checkDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CheckDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetBillOfMaterialsReturnModel>("EXEC @procResult = [dbo].[uspGetBillOfMaterials] @StartProductID, @CheckDate", startProductIdParam, checkDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel>> UspGetBillOfMaterialsAsync(int? startProductId, System.DateTime? checkDate)
        {
            var startProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startProductId.HasValue)
                startProductIdParam.Value = System.DBNull.Value;

            var checkDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CheckDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetBillOfMaterialsReturnModel>("EXEC [dbo].[uspGetBillOfMaterials] @StartProductID, @CheckDate", startProductIdParam, checkDateParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId)
        {
            int procResult;
            return UspGetEmployeeManagers(businessEntityId, out procResult);
        }

        public System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId, out int procResult)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetEmployeeManagersReturnModel>("EXEC @procResult = [dbo].[uspGetEmployeeManagers] @BusinessEntityID", businessEntityIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetEmployeeManagersReturnModel>> UspGetEmployeeManagersAsync(int? businessEntityId)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetEmployeeManagersReturnModel>("EXEC [dbo].[uspGetEmployeeManagers] @BusinessEntityID", businessEntityIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId)
        {
            int procResult;
            return UspGetManagerEmployees(businessEntityId, out procResult);
        }

        public System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId, out int procResult)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetManagerEmployeesReturnModel>("EXEC @procResult = [dbo].[uspGetManagerEmployees] @BusinessEntityID", businessEntityIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetManagerEmployeesReturnModel>> UspGetManagerEmployeesAsync(int? businessEntityId)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetManagerEmployeesReturnModel>("EXEC [dbo].[uspGetManagerEmployees] @BusinessEntityID", businessEntityIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return UspGetWhereUsedProductId(startProductId, checkDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate, out int procResult)
        {
            var startProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startProductId.HasValue)
                startProductIdParam.Value = System.DBNull.Value;

            var checkDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CheckDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetWhereUsedProductIdReturnModel>("EXEC @procResult = [dbo].[uspGetWhereUsedProductID] @StartProductID, @CheckDate", startProductIdParam, checkDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel>> UspGetWhereUsedProductIdAsync(int? startProductId, System.DateTime? checkDate)
        {
            var startProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startProductId.HasValue)
                startProductIdParam.Value = System.DBNull.Value;

            var checkDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CheckDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetWhereUsedProductIdReturnModel>("EXEC [dbo].[uspGetWhereUsedProductID] @StartProductID, @CheckDate", startProductIdParam, checkDateParam).ToListAsync();

            return procResultData;
        }

        public int UspLogError(out int? errorLogId)
        {
            var errorLogIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ErrorLogID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[uspLogError @ErrorLogID OUTPUT", errorLogIdParam, procResultParam);
            if (IsSqlParameterNull(errorLogIdParam))
                errorLogId = null;
            else
                errorLogId = (int) errorLogIdParam.Value;
            return (int) procResultParam.Value;
        }
        public int UspPrintError()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[uspPrintError ", procResultParam);
            return (int) procResultParam.Value;
        }
        public int UspSearchCandidateResumes(string searchString, bool? useInflectional, bool? useThesaurus, int? language)
        {
            var searchStringParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@searchString", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = searchString, Size = 1000 };
            if (searchStringParam.Value == null)
                searchStringParam.Value = System.DBNull.Value;

            var useInflectionalParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@useInflectional", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = useInflectional.GetValueOrDefault() };
            if (!useInflectional.HasValue)
                useInflectionalParam.Value = System.DBNull.Value;

            var useThesaurusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@useThesaurus", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = useThesaurus.GetValueOrDefault() };
            if (!useThesaurus.HasValue)
                useThesaurusParam.Value = System.DBNull.Value;

            var languageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@language", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = language.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!language.HasValue)
                languageParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[uspSearchCandidateResumes @searchString, @useInflectional, @useThesaurus, @language", searchStringParam, useInflectionalParam, useThesaurusParam, languageParam, procResultParam);
            return (int) procResultParam.Value;
        }
        public int UspUpdateEmployeeHireInfo(int? businessEntityId, string jobTitle, System.DateTime? hireDate, System.DateTime? rateChangeDate, decimal? rate, byte? payFrequency, bool? currentFlag)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var jobTitleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@JobTitle", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = jobTitle, Size = 50 };
            if (jobTitleParam.Value == null)
                jobTitleParam.Value = System.DBNull.Value;

            var hireDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@HireDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = hireDate.GetValueOrDefault() };
            if (!hireDate.HasValue)
                hireDateParam.Value = System.DBNull.Value;

            var rateChangeDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RateChangeDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = rateChangeDate.GetValueOrDefault() };
            if (!rateChangeDate.HasValue)
                rateChangeDateParam.Value = System.DBNull.Value;

            var rateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Rate", SqlDbType = System.Data.SqlDbType.Money, Direction = System.Data.ParameterDirection.Input, Value = rate.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!rate.HasValue)
                rateParam.Value = System.DBNull.Value;

            var payFrequencyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PayFrequency", SqlDbType = System.Data.SqlDbType.TinyInt, Direction = System.Data.ParameterDirection.Input, Value = payFrequency.GetValueOrDefault(), Precision = 3, Scale = 0 };
            if (!payFrequency.HasValue)
                payFrequencyParam.Value = System.DBNull.Value;

            var currentFlagParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentFlag", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = currentFlag.GetValueOrDefault() };
            if (!currentFlag.HasValue)
                currentFlagParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [HumanResources].[uspUpdateEmployeeHireInfo @BusinessEntityID, @JobTitle, @HireDate, @RateChangeDate, @Rate, @PayFrequency, @CurrentFlag", businessEntityIdParam, jobTitleParam, hireDateParam, rateChangeDateParam, rateParam, payFrequencyParam, currentFlagParam, procResultParam);
            return (int) procResultParam.Value;
        }
        public int UspUpdateEmployeeLogin(int? businessEntityId, System.Data.Entity.Hierarchy.HierarchyId organizationNode, string loginId, string jobTitle, System.DateTime? hireDate, bool? currentFlag)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var organizationNodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OrganizationNode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = organizationNode, Size = 892 };
            if (organizationNodeParam.Value == null)
                organizationNodeParam.Value = System.DBNull.Value;

            var loginIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LoginID", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = loginId, Size = 256 };
            if (loginIdParam.Value == null)
                loginIdParam.Value = System.DBNull.Value;

            var jobTitleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@JobTitle", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = jobTitle, Size = 50 };
            if (jobTitleParam.Value == null)
                jobTitleParam.Value = System.DBNull.Value;

            var hireDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@HireDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = hireDate.GetValueOrDefault() };
            if (!hireDate.HasValue)
                hireDateParam.Value = System.DBNull.Value;

            var currentFlagParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentFlag", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = currentFlag.GetValueOrDefault() };
            if (!currentFlag.HasValue)
                currentFlagParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [HumanResources].[uspUpdateEmployeeLogin @BusinessEntityID, @OrganizationNode, @LoginID, @JobTitle, @HireDate, @CurrentFlag", businessEntityIdParam, organizationNodeParam, loginIdParam, jobTitleParam, hireDateParam, currentFlagParam, procResultParam);
            return (int) procResultParam.Value;
        }
        public int UspUpdateEmployeePersonalInfo(int? businessEntityId, string nationalIdNumber, System.DateTime? birthDate, string maritalStatus, string gender)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var nationalIdNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NationalIDNumber", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = nationalIdNumber, Size = 15 };
            if (nationalIdNumberParam.Value == null)
                nationalIdNumberParam.Value = System.DBNull.Value;

            var birthDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = birthDate.GetValueOrDefault() };
            if (!birthDate.HasValue)
                birthDateParam.Value = System.DBNull.Value;

            var maritalStatusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaritalStatus", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = maritalStatus, Size = 1 };
            if (maritalStatusParam.Value == null)
                maritalStatusParam.Value = System.DBNull.Value;

            var genderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Gender", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = gender, Size = 1 };
            if (genderParam.Value == null)
                genderParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [HumanResources].[uspUpdateEmployeePersonalInfo @BusinessEntityID, @NationalIDNumber, @BirthDate, @MaritalStatus, @Gender", businessEntityIdParam, nationalIdNumberParam, birthDateParam, maritalStatusParam, genderParam, procResultParam);
            return (int) procResultParam.Value;
        }
    }
}
// </auto-generated>
