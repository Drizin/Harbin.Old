// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.72
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace AdventureWorks.Business.Entities
{

    // SalesPerson
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public partial class SalesPersonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesPerson>
    {
        public SalesPersonConfiguration() : this("Sales")
        {
        }

        public SalesPersonConfiguration(string schema)
        {
            ToTable("SalesPerson", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").HasColumnType("int").IsOptional();
            Property(x => x.SalesQuota).HasColumnName(@"SalesQuota").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.Bonus).HasColumnName(@"Bonus").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.CommissionPct).HasColumnName(@"CommissionPct").HasColumnType("smallmoney").IsRequired().HasPrecision(10,4);
            Property(x => x.SalesYtd).HasColumnName(@"SalesYTD").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.SalesLastYear).HasColumnName(@"SalesLastYear").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.SalesTerritory).WithMany(b => b.SalesPeople).HasForeignKey(c => c.TerritoryId).WillCascadeOnDelete(false); // FK_SalesPerson_SalesTerritory_TerritoryID
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
