// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.72
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace AdventureWorks.Business.Entities
{

    using System.Linq;
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public partial class FakeAdventureWorksDB : IAdventureWorksDB
    {
        public System.Data.Entity.DbSet<Address> Addresses { get; set; }
        public System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; }
        public System.Data.Entity.DbSet<AwBuildVersion> AwBuildVersions { get; set; }
        public System.Data.Entity.DbSet<BillOfMaterial> BillOfMaterials { get; set; }
        public System.Data.Entity.DbSet<BusinessEntity> BusinessEntities { get; set; }
        public System.Data.Entity.DbSet<BusinessEntityAddress> BusinessEntityAddresses { get; set; }
        public System.Data.Entity.DbSet<BusinessEntityContact> BusinessEntityContacts { get; set; }
        public System.Data.Entity.DbSet<ContactType> ContactTypes { get; set; }
        public System.Data.Entity.DbSet<CountryRegion> CountryRegions { get; set; }
        public System.Data.Entity.DbSet<CountryRegionCurrency> CountryRegionCurrencies { get; set; }
        public System.Data.Entity.DbSet<CreditCard> CreditCards { get; set; }
        public System.Data.Entity.DbSet<Culture> Cultures { get; set; }
        public System.Data.Entity.DbSet<Currency> Currencies { get; set; }
        public System.Data.Entity.DbSet<CurrencyRate> CurrencyRates { get; set; }
        public System.Data.Entity.DbSet<Customer> Customers { get; set; }
        public System.Data.Entity.DbSet<DatabaseLog> DatabaseLogs { get; set; }
        public System.Data.Entity.DbSet<Department> Departments { get; set; }
        public System.Data.Entity.DbSet<Document> Documents { get; set; }
        public System.Data.Entity.DbSet<EmailAddress> EmailAddresses { get; set; }
        public System.Data.Entity.DbSet<Employee> Employees { get; set; }
        public System.Data.Entity.DbSet<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; }
        public System.Data.Entity.DbSet<EmployeePayHistory> EmployeePayHistories { get; set; }
        public System.Data.Entity.DbSet<ErrorLog> ErrorLogs { get; set; }
        public System.Data.Entity.DbSet<Illustration> Illustrations { get; set; }
        public System.Data.Entity.DbSet<JobCandidate> JobCandidates { get; set; }
        public System.Data.Entity.DbSet<Location> Locations { get; set; }
        public System.Data.Entity.DbSet<Password> Passwords { get; set; }
        public System.Data.Entity.DbSet<Person> People { get; set; }
        public System.Data.Entity.DbSet<PersonCreditCard> PersonCreditCards { get; set; }
        public System.Data.Entity.DbSet<PersonPhone> PersonPhones { get; set; }
        public System.Data.Entity.DbSet<PhoneNumberType> PhoneNumberTypes { get; set; }
        public System.Data.Entity.DbSet<Product> Products { get; set; }
        public System.Data.Entity.DbSet<ProductCategory> ProductCategories { get; set; }
        public System.Data.Entity.DbSet<ProductCostHistory> ProductCostHistories { get; set; }
        public System.Data.Entity.DbSet<ProductDescription> ProductDescriptions { get; set; }
        public System.Data.Entity.DbSet<ProductDocument> ProductDocuments { get; set; }
        public System.Data.Entity.DbSet<ProductInventory> ProductInventories { get; set; }
        public System.Data.Entity.DbSet<ProductListPriceHistory> ProductListPriceHistories { get; set; }
        public System.Data.Entity.DbSet<ProductModel> ProductModels { get; set; }
        public System.Data.Entity.DbSet<ProductModelIllustration> ProductModelIllustrations { get; set; }
        public System.Data.Entity.DbSet<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; }
        public System.Data.Entity.DbSet<ProductPhoto> ProductPhotos { get; set; }
        public System.Data.Entity.DbSet<ProductProductPhoto> ProductProductPhotos { get; set; }
        public System.Data.Entity.DbSet<ProductReview> ProductReviews { get; set; }
        public System.Data.Entity.DbSet<ProductSubcategory> ProductSubcategories { get; set; }
        public System.Data.Entity.DbSet<ProductVendor> ProductVendors { get; set; }
        public System.Data.Entity.DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public System.Data.Entity.DbSet<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; }
        public System.Data.Entity.DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public System.Data.Entity.DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; }
        public System.Data.Entity.DbSet<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; }
        public System.Data.Entity.DbSet<SalesPerson> SalesPeople { get; set; }
        public System.Data.Entity.DbSet<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; }
        public System.Data.Entity.DbSet<SalesReason> SalesReasons { get; set; }
        public System.Data.Entity.DbSet<SalesTaxRate> SalesTaxRates { get; set; }
        public System.Data.Entity.DbSet<SalesTerritory> SalesTerritories { get; set; }
        public System.Data.Entity.DbSet<SalesTerritoryHistory> SalesTerritoryHistories { get; set; }
        public System.Data.Entity.DbSet<ScrapReason> ScrapReasons { get; set; }
        public System.Data.Entity.DbSet<Shift> Shifts { get; set; }
        public System.Data.Entity.DbSet<ShipMethod> ShipMethods { get; set; }
        public System.Data.Entity.DbSet<ShoppingCartItem> ShoppingCartItems { get; set; }
        public System.Data.Entity.DbSet<SpecialOffer> SpecialOffers { get; set; }
        public System.Data.Entity.DbSet<SpecialOfferProduct> SpecialOfferProducts { get; set; }
        public System.Data.Entity.DbSet<StateProvince> StateProvinces { get; set; }
        public System.Data.Entity.DbSet<Store> Stores { get; set; }
        public System.Data.Entity.DbSet<TransactionHistory> TransactionHistories { get; set; }
        public System.Data.Entity.DbSet<TransactionHistoryArchive> TransactionHistoryArchives { get; set; }
        public System.Data.Entity.DbSet<UnitMeasure> UnitMeasures { get; set; }
        public System.Data.Entity.DbSet<VAdditionalContactInfo> VAdditionalContactInfos { get; set; }
        public System.Data.Entity.DbSet<VEmployee> VEmployees { get; set; }
        public System.Data.Entity.DbSet<VEmployeeDepartment> VEmployeeDepartments { get; set; }
        public System.Data.Entity.DbSet<VEmployeeDepartmentHistory> VEmployeeDepartmentHistories { get; set; }
        public System.Data.Entity.DbSet<Vendor> Vendors { get; set; }
        public System.Data.Entity.DbSet<VIndividualCustomer> VIndividualCustomers { get; set; }
        public System.Data.Entity.DbSet<VJobCandidate> VJobCandidates { get; set; }
        public System.Data.Entity.DbSet<VJobCandidateEducation> VJobCandidateEducations { get; set; }
        public System.Data.Entity.DbSet<VJobCandidateEmployment> VJobCandidateEmployments { get; set; }
        public System.Data.Entity.DbSet<VPersonDemographic> VPersonDemographics { get; set; }
        public System.Data.Entity.DbSet<VProductAndDescription> VProductAndDescriptions { get; set; }
        public System.Data.Entity.DbSet<VProductModelCatalogDescription> VProductModelCatalogDescriptions { get; set; }
        public System.Data.Entity.DbSet<VProductModelInstruction> VProductModelInstructions { get; set; }
        public System.Data.Entity.DbSet<VSalesPerson> VSalesPeople { get; set; }
        public System.Data.Entity.DbSet<VSalesPersonSalesByFiscalYear> VSalesPersonSalesByFiscalYears { get; set; }
        public System.Data.Entity.DbSet<VStateProvinceCountryRegion> VStateProvinceCountryRegions { get; set; }
        public System.Data.Entity.DbSet<VStoreWithAddress> VStoreWithAddresses { get; set; }
        public System.Data.Entity.DbSet<VStoreWithContact> VStoreWithContacts { get; set; }
        public System.Data.Entity.DbSet<VStoreWithDemographic> VStoreWithDemographics { get; set; }
        public System.Data.Entity.DbSet<VVendorWithAddress> VVendorWithAddresses { get; set; }
        public System.Data.Entity.DbSet<VVendorWithContact> VVendorWithContacts { get; set; }
        public System.Data.Entity.DbSet<WorkOrder> WorkOrders { get; set; }
        public System.Data.Entity.DbSet<WorkOrderRouting> WorkOrderRoutings { get; set; }

        public FakeAdventureWorksDB()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            Addresses = new FakeDbSet<Address>("AddressId");
            AddressTypes = new FakeDbSet<AddressType>("AddressTypeId");
            AwBuildVersions = new FakeDbSet<AwBuildVersion>("SystemInformationId");
            BillOfMaterials = new FakeDbSet<BillOfMaterial>("BillOfMaterialsId");
            BusinessEntities = new FakeDbSet<BusinessEntity>("BusinessEntityId");
            BusinessEntityAddresses = new FakeDbSet<BusinessEntityAddress>("BusinessEntityId", "AddressId", "AddressTypeId");
            BusinessEntityContacts = new FakeDbSet<BusinessEntityContact>("BusinessEntityId", "PersonId", "ContactTypeId");
            ContactTypes = new FakeDbSet<ContactType>("ContactTypeId");
            CountryRegions = new FakeDbSet<CountryRegion>("CountryRegionCode");
            CountryRegionCurrencies = new FakeDbSet<CountryRegionCurrency>("CountryRegionCode", "CurrencyCode");
            CreditCards = new FakeDbSet<CreditCard>("CreditCardId");
            Cultures = new FakeDbSet<Culture>("CultureId");
            Currencies = new FakeDbSet<Currency>("CurrencyCode");
            CurrencyRates = new FakeDbSet<CurrencyRate>("CurrencyRateId");
            Customers = new FakeDbSet<Customer>("CustomerId");
            DatabaseLogs = new FakeDbSet<DatabaseLog>("DatabaseLogId");
            Departments = new FakeDbSet<Department>("DepartmentId");
            Documents = new FakeDbSet<Document>("DocumentNode");
            EmailAddresses = new FakeDbSet<EmailAddress>("BusinessEntityId", "EmailAddressId");
            Employees = new FakeDbSet<Employee>("BusinessEntityId");
            EmployeeDepartmentHistories = new FakeDbSet<EmployeeDepartmentHistory>("BusinessEntityId", "StartDate", "DepartmentId", "ShiftId");
            EmployeePayHistories = new FakeDbSet<EmployeePayHistory>("BusinessEntityId", "RateChangeDate");
            ErrorLogs = new FakeDbSet<ErrorLog>("ErrorLogId");
            Illustrations = new FakeDbSet<Illustration>("IllustrationId");
            JobCandidates = new FakeDbSet<JobCandidate>("JobCandidateId");
            Locations = new FakeDbSet<Location>("LocationId");
            Passwords = new FakeDbSet<Password>("BusinessEntityId");
            People = new FakeDbSet<Person>("BusinessEntityId");
            PersonCreditCards = new FakeDbSet<PersonCreditCard>("BusinessEntityId", "CreditCardId");
            PersonPhones = new FakeDbSet<PersonPhone>("BusinessEntityId", "PhoneNumber", "PhoneNumberTypeId");
            PhoneNumberTypes = new FakeDbSet<PhoneNumberType>("PhoneNumberTypeId");
            Products = new FakeDbSet<Product>("ProductId");
            ProductCategories = new FakeDbSet<ProductCategory>("ProductCategoryId");
            ProductCostHistories = new FakeDbSet<ProductCostHistory>("ProductId", "StartDate");
            ProductDescriptions = new FakeDbSet<ProductDescription>("ProductDescriptionId");
            ProductDocuments = new FakeDbSet<ProductDocument>("ProductId", "DocumentNode");
            ProductInventories = new FakeDbSet<ProductInventory>("ProductId", "LocationId");
            ProductListPriceHistories = new FakeDbSet<ProductListPriceHistory>("ProductId", "StartDate");
            ProductModels = new FakeDbSet<ProductModel>("ProductModelId");
            ProductModelIllustrations = new FakeDbSet<ProductModelIllustration>("ProductModelId", "IllustrationId");
            ProductModelProductDescriptionCultures = new FakeDbSet<ProductModelProductDescriptionCulture>("ProductModelId", "ProductDescriptionId", "CultureId");
            ProductPhotos = new FakeDbSet<ProductPhoto>("ProductPhotoId");
            ProductProductPhotos = new FakeDbSet<ProductProductPhoto>("ProductId", "ProductPhotoId");
            ProductReviews = new FakeDbSet<ProductReview>("ProductReviewId");
            ProductSubcategories = new FakeDbSet<ProductSubcategory>("ProductSubcategoryId");
            ProductVendors = new FakeDbSet<ProductVendor>("ProductId", "BusinessEntityId");
            PurchaseOrderDetails = new FakeDbSet<PurchaseOrderDetail>("PurchaseOrderId", "PurchaseOrderDetailId");
            PurchaseOrderHeaders = new FakeDbSet<PurchaseOrderHeader>("PurchaseOrderId");
            SalesOrderDetails = new FakeDbSet<SalesOrderDetail>("SalesOrderId", "SalesOrderDetailId");
            SalesOrderHeaders = new FakeDbSet<SalesOrderHeader>("SalesOrderId");
            SalesOrderHeaderSalesReasons = new FakeDbSet<SalesOrderHeaderSalesReason>("SalesOrderId", "SalesReasonId");
            SalesPeople = new FakeDbSet<SalesPerson>("BusinessEntityId");
            SalesPersonQuotaHistories = new FakeDbSet<SalesPersonQuotaHistory>("BusinessEntityId", "QuotaDate");
            SalesReasons = new FakeDbSet<SalesReason>("SalesReasonId");
            SalesTaxRates = new FakeDbSet<SalesTaxRate>("SalesTaxRateId");
            SalesTerritories = new FakeDbSet<SalesTerritory>("TerritoryId");
            SalesTerritoryHistories = new FakeDbSet<SalesTerritoryHistory>("BusinessEntityId", "StartDate", "TerritoryId");
            ScrapReasons = new FakeDbSet<ScrapReason>("ScrapReasonId");
            Shifts = new FakeDbSet<Shift>("ShiftId");
            ShipMethods = new FakeDbSet<ShipMethod>("ShipMethodId");
            ShoppingCartItems = new FakeDbSet<ShoppingCartItem>("ShoppingCartItemId");
            SpecialOffers = new FakeDbSet<SpecialOffer>("SpecialOfferId");
            SpecialOfferProducts = new FakeDbSet<SpecialOfferProduct>("SpecialOfferId", "ProductId");
            StateProvinces = new FakeDbSet<StateProvince>("StateProvinceId");
            Stores = new FakeDbSet<Store>("BusinessEntityId");
            TransactionHistories = new FakeDbSet<TransactionHistory>("TransactionId");
            TransactionHistoryArchives = new FakeDbSet<TransactionHistoryArchive>("TransactionId");
            UnitMeasures = new FakeDbSet<UnitMeasure>("UnitMeasureCode");
            VAdditionalContactInfos = new FakeDbSet<VAdditionalContactInfo>("BusinessEntityId", "FirstName", "LastName", "Rowguid", "ModifiedDate");
            VEmployees = new FakeDbSet<VEmployee>("BusinessEntityId", "FirstName", "LastName", "JobTitle", "EmailPromotion", "AddressLine1", "City", "StateProvinceName", "PostalCode", "CountryRegionName");
            VEmployeeDepartments = new FakeDbSet<VEmployeeDepartment>("BusinessEntityId", "FirstName", "LastName", "JobTitle", "Department", "GroupName", "StartDate");
            VEmployeeDepartmentHistories = new FakeDbSet<VEmployeeDepartmentHistory>("BusinessEntityId", "FirstName", "LastName", "Shift", "Department", "GroupName", "StartDate");
            Vendors = new FakeDbSet<Vendor>("BusinessEntityId");
            VIndividualCustomers = new FakeDbSet<VIndividualCustomer>("BusinessEntityId", "FirstName", "LastName", "EmailPromotion", "AddressType", "AddressLine1", "City", "StateProvinceName", "PostalCode", "CountryRegionName");
            VJobCandidates = new FakeDbSet<VJobCandidate>("JobCandidateId", "ModifiedDate");
            VJobCandidateEducations = new FakeDbSet<VJobCandidateEducation>("JobCandidateId");
            VJobCandidateEmployments = new FakeDbSet<VJobCandidateEmployment>("JobCandidateId");
            VPersonDemographics = new FakeDbSet<VPersonDemographic>("BusinessEntityId");
            VProductAndDescriptions = new FakeDbSet<VProductAndDescription>("ProductId", "Name", "ProductModel", "CultureId", "Description");
            VProductModelCatalogDescriptions = new FakeDbSet<VProductModelCatalogDescription>("ProductModelId", "Name", "Rowguid", "ModifiedDate");
            VProductModelInstructions = new FakeDbSet<VProductModelInstruction>("ProductModelId", "Name", "Rowguid", "ModifiedDate");
            VSalesPeople = new FakeDbSet<VSalesPerson>("BusinessEntityId", "FirstName", "LastName", "JobTitle", "EmailPromotion", "AddressLine1", "City", "StateProvinceName", "PostalCode", "CountryRegionName", "SalesYtd", "SalesLastYear");
            VSalesPersonSalesByFiscalYears = new FakeDbSet<VSalesPersonSalesByFiscalYear>("JobTitle", "SalesTerritory");
            VStateProvinceCountryRegions = new FakeDbSet<VStateProvinceCountryRegion>("StateProvinceId", "StateProvinceCode", "IsOnlyStateProvinceFlag", "StateProvinceName", "TerritoryId", "CountryRegionCode", "CountryRegionName");
            VStoreWithAddresses = new FakeDbSet<VStoreWithAddress>("BusinessEntityId", "Name", "AddressType", "AddressLine1", "City", "StateProvinceName", "PostalCode", "CountryRegionName");
            VStoreWithContacts = new FakeDbSet<VStoreWithContact>("BusinessEntityId", "Name", "ContactType", "FirstName", "LastName", "EmailPromotion");
            VStoreWithDemographics = new FakeDbSet<VStoreWithDemographic>("BusinessEntityId", "Name");
            VVendorWithAddresses = new FakeDbSet<VVendorWithAddress>("BusinessEntityId", "Name", "AddressType", "AddressLine1", "City", "StateProvinceName", "PostalCode", "CountryRegionName");
            VVendorWithContacts = new FakeDbSet<VVendorWithContact>("BusinessEntityId", "Name", "ContactType", "FirstName", "LastName", "EmailPromotion");
            WorkOrders = new FakeDbSet<WorkOrder>("WorkOrderId");
            WorkOrderRoutings = new FakeDbSet<WorkOrderRouting>("WorkOrderId", "ProductId", "OperationSequence");
            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();
        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

        // Stored Procedures
        public System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return UspGetBillOfMaterials(startProductId, checkDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel>> UspGetBillOfMaterialsAsync(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetBillOfMaterials(startProductId, checkDate, out procResult));
        }

        public System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId)
        {
            int procResult;
            return UspGetEmployeeManagers(businessEntityId, out procResult);
        }

        public System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetEmployeeManagersReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetEmployeeManagersReturnModel>> UspGetEmployeeManagersAsync(int? businessEntityId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetEmployeeManagers(businessEntityId, out procResult));
        }

        public System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId)
        {
            int procResult;
            return UspGetManagerEmployees(businessEntityId, out procResult);
        }

        public System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetManagerEmployeesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetManagerEmployeesReturnModel>> UspGetManagerEmployeesAsync(int? businessEntityId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetManagerEmployees(businessEntityId, out procResult));
        }

        public System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return UspGetWhereUsedProductId(startProductId, checkDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel>> UspGetWhereUsedProductIdAsync(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetWhereUsedProductId(startProductId, checkDate, out procResult));
        }

        public int UspLogError(out int? errorLogId)
        {
            errorLogId = default(int);
            return 0;
        }
        public int UspPrintError()
        {
            return 0;
        }
        public int UspSearchCandidateResumes(string searchString, bool? useInflectional, bool? useThesaurus, int? language)
        {
            return 0;
        }
        public int UspUpdateEmployeeHireInfo(int? businessEntityId, string jobTitle, System.DateTime? hireDate, System.DateTime? rateChangeDate, decimal? rate, byte? payFrequency, bool? currentFlag)
        {
            return 0;
        }
        public int UspUpdateEmployeeLogin(int? businessEntityId, System.Data.Entity.Hierarchy.HierarchyId organizationNode, string loginId, string jobTitle, System.DateTime? hireDate, bool? currentFlag)
        {
            return 0;
        }
        public int UspUpdateEmployeePersonalInfo(int? businessEntityId, string nationalIdNumber, System.DateTime? birthDate, string maritalStatus, string gender)
        {
            return 0;
        }
    }
}
// </auto-generated>
