<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Harbin.Common</name>
    </assembly>
    <members>
        <member name="M:Harbin.Common.Database.DataException.WrapSqlException(System.Data.SqlClient.SqlException,System.String,System.Object)">
            <summary>
            Wraps the SqlException, add contextual information (SqlQuery, parameter values), and then you should rethrow (do not swallow/ignore exceptions)
            According to the SQL error code, we can create a more meaningful message (parsing information from the DB error), which can later be translated by i18n
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:Harbin.Common.BaseMethodResult`1">
            <summary>
            Returns the result of a method that does NOT output any entity, but may or may not return SUCCESS
            If your method doesn't return anything, just use void, no need to use MethodResult
            </summary>
            <typeparam name="R"></typeparam>
        </member>
        <member name="P:Harbin.Common.BaseMethodResult`1.LastException">
            <summary>
            Returns the Last occurred Exception, if any. 
            Only used if we're swallowing (ignoring) exceptions intentionally.
            Please note that expected errors should NOT be returned as exceptions, but rather as enums.
            </summary>
        </member>
        <member name="T:Harbin.Common.ResultCodeEnum">
            <summary>
            Generic enum for operations which return either Success or Error.
            </summary>
        </member>
        <member name="T:Harbin.Common.MethodResult`1">
            <summary>
            Returns the result of a method that does NOT output any entity
            </summary>
            <typeparam name="R"></typeparam>
        </member>
        <member name="T:Harbin.Common.MethodResult`2">
            <summary>
            Returns the result of a method that DOES output entity of type T
            </summary>
            <typeparam name="R"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Harbin.Common.MethodListResult`2">
            <summary>
            Returns the result of a method that outputs a LIST of entities of type T
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
        </member>
        <member name="M:Harbin.Common.General.ReflectionHelper.IsSubclassOfGeneric(System.Type,System.Type)">
            <summary>
            Checks if type "toCheck" is subclass of generic type "generic".
            E.g. IsSubclassOfRawGeneric(typeof(List{}), typeof(List{int}))
            </summary>
            <param name="generic"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="T:Harbin.Common.Queries.IQueryableFilterExtensions">
            <summary>
            Extensions that can be used to filter IQueryable{T} using LINQ Expressions that can be translated into SQL.
            Should extend IQueryable{Entity} (and return same type), since they are FILTER methods that can be combined with other filters.
            </summary>
        </member>
        <member name="M:Harbin.Common.Queries.IQueryableFilterExtensions.WherePropertyIn``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.ICollection{``1})">
            <summary>
            Filters by the Property value. Filter records in which property IS IN the given LIST
            Sample usage: contacts.Contains(x => x.ContactTypeID, new List{int}() { 1, 2, 3 } )
            </summary>
            <typeparam name="E">Entity type which being filtered</typeparam>
            <typeparam name="U">Underlying type</typeparam>
            <param name="entities">Entities to filter</param>
            <param name="propertySelector">Property which value should be contained in list</param>
            <param name="values">List of possible values</param>
            <returns></returns>
        </member>
        <member name="M:Harbin.Common.Queries.IQueryableFilterExtensions.WherePropertyNotIn``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.ICollection{``1})">
            <summary>
            Filters by the Property value. Filter records in which property is NOT IN the given LIST
            Sample usage: contacts.Contains(x => x.ContactTypeID, new List{int}() { 1, 3 } )
            </summary>
            <typeparam name="E">Entity type which being filtered</typeparam>
            <typeparam name="U">Underlying type</typeparam>
            <param name="propertySelector">Property which value should be contained in list</param>
            <param name="values">List of possible values</param>
            <param name="entities">Entities to filter</param>
            <returns></returns>
        </member>
        <member name="T:Harbin.Common.Queries.IQueryableFindExtensions">
            <summary>
            Extensions that can be used to FIND an element from a DbSet{Entity} using LINQ Expressions that can be translated into SQL.
            Should extend DbSet{Entity} and return Entity, since they return a single instance or null (use Single or SingleOrDefault accordingly)
            </summary>
        </member>
        <member name="T:Harbin.Common.Queries.QueryHelper">
            <summary>
            LINQ Expressions that can be directly translated to Entity Framework
            </summary>
        </member>
        <member name="M:Harbin.Common.Queries.QueryHelper.CreateNotInExpression``2(System.Reflection.PropertyInfo,System.Collections.Generic.ICollection{``1})">
            <summary>
            Generates a NOT IN (!list.Contains(value)) Expression, which translates into SQL for Entity Framework
            </summary>
        </member>
        <member name="M:Harbin.Common.Queries.QueryHelper.CreateNotInExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.ICollection{``1})">
            <summary>
            Generates a NOT IN (!list.Contains(value)) Expression, which translates into SQL for Entity Framework
            </summary>
        </member>
        <member name="M:Harbin.Common.Queries.QueryHelper.CreateInExpression``2(System.Reflection.PropertyInfo,System.Collections.Generic.ICollection{``1})">
            <summary>
            Generates a IN (list.Contains(value)) Expression, which translates into SQL for Entity Framework
            </summary>
        </member>
        <member name="M:Harbin.Common.Queries.QueryHelper.CreateInExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.ICollection{``1})">
            <summary>
            Generates a IN (list.Contains(value)) Expression, which translates into SQL for Entity Framework
            </summary>
        </member>
        <member name="T:Harbin.Common.TypeSafeEnums.TypeSafeEnum`2">
            <summary>
            Type Safe Enums ("Class Enums" or "Smart Enums") that can be serialized/deserialized into POCO classes properties.
            Type <typeparamref name="U"/> is the underlying CLR type for the key, defined in POCO class.
            Type <typeparamref name="TSE"/> is the base type for the Type Safe Enum.
            This base class enforces singleton behavior for each different possible key (<typeparamref name="U"/> key) in this type <typeparamref name="TSE" />.
            </summary>
            <typeparam name="U">Underlying CLR type of the identifier (if Key in POCO is string, int, Guid, etc)</typeparam>
            <typeparam name="TSE">Base type that is implementing the Type-Safe-Enum. 
            If each enum value has a different class then should use the common superclass (e.g. both AccountingManagerContactTypeEnum and AssistantSalesAgentContactTypeEnum should use ContactTypeEnum as <typeparamref name="TSE"/>)</typeparam>
        </member>
        <member name="F:Harbin.Common.TypeSafeEnums.TypeSafeEnum`2.enumValues">
            <summary>
            Tracks all instances of the underlying type <typeparamref name="TSE"/>.
            </summary>
        </member>
        <member name="P:Harbin.Common.TypeSafeEnums.TypeSafeEnum`2.Values">
            <summary>
            All possible Values for this Type-Safe Enum <typeparamref name="TSE"/>
            </summary>
        </member>
        <member name="P:Harbin.Common.TypeSafeEnums.TypeSafeEnum`2.Keys">
            <summary>
            All possible underlying Keys for this Type-Safe Enum <typeparamref name="TSE"/>
            </summary>
        </member>
        <member name="M:Harbin.Common.TypeSafeEnums.TypeSafeEnum`2.UnderlyingPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,`0}})">
            <summary>
            For an entity <typeparamref name="E"/> and an Type-Safe-Enum property (<typeparamref name="TSE"/>), returns the Name of the underlying property.
            </summary>
            <typeparam name="E">Entity with the Type-Safe-Enum (must specify since the Type-Safe-Enum does NOT have a reference to the container class)</typeparam>
            <param name="propertySelector">Selector for Type-Safe-Enum</param>
            <returns>Name of underlying type</returns>
        </member>
        <member name="M:Harbin.Common.TypeSafeEnums.TypeSafeEnum`2.UnderlyingProperty``1(System.Linq.Expressions.Expression{System.Func{``0,`0}})">
            <summary>
            For an entity <typeparamref name="E"/> and a property of type <typeparamref name="TSE"/>, returns the PropertyInfo for the underlying property of <typeparamref name="TSE"/>.
            </summary>
            <typeparam name="E">Entity with the Type-Safe-Enum (must specify since the Type-Safe-Enum does NOT have a reference to the container class)</typeparam>
            <param name="propertySelector">Selector for Type-Safe-Enum</param>
            <returns>PropertyInfo of underlying type</returns>
        </member>
        <member name="M:Harbin.Common.TypeSafeEnums.TypeSafeDapper.RegisterDapperConverter(System.Type)">
            <summary>
            Given a Type-Safe-Enum TSE{TSE, U}, this will register a DapperConverter for that TSE:
            This is a dynamic way of calling Dapper.SqlMapper.AddTypeHandler(new TypeSafeEnumDapperConverter{TSE, U}());
            </summary>
            <param name="typeSafeEnumType"></param>
        </member>
        <member name="T:Harbin.Common.TypeSafeEnums.TypeSafeDapper.TypeSafeEnumDapperConverter`2">
            <summary>
            Configures Dapper to correctly map from <typeparamref name="U"/> key (underlying CLR type) to <typeparamref name="TSE"/> value and vice-versa.
            </summary>
            <typeparam name="TSE"></typeparam>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Harbin.Common.TypeSafeEnums.TypeSafeEnumHelper.IsTypeSafeEnum(System.Type)">
            <summary>
            If type is concrete implementation of TypeSafeEnum{TSE, U}, EVEN if it's a specialization (derived of another concrete implementation)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Harbin.Common.TypeSafeEnums.TypeSafeEnumHelper.IsTopLevelTypeSafeEnum(System.Type)">
            <summary>
            If type is concrete implementation of TypeSafeEnum{TSE, U}, and is not derived from another concrete implementation
            This means that this TypeSafeEnum{TSE, U} is "top level" enum, responsible for tracking all possible values (enum members) of all instances of itself or of any child
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Harbin.Common.TypeSafeEnums.TypeSafeEnumHelper.GetTopLevelTypeSafeEnums(System.Reflection.Assembly)">
            <summary>
            Returns all "Top-Level" Type-Safe-Enums of an assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:Harbin.Common.TypeSafeEnums.TypeSafeEnumsQueryExtensions">
            <summary>
            Query Extensions for Entities that have Properties which implement TypeSafeEnum
            Extensions should extend the IQueryable{Entity} (and return same type) if they are FILTER methods that can be combined with other filters.
            Extensions should extend the DbSet{Entity} (and return Entity) if they are FIND methods that return a single instance or null (use Single or SingleOrDefault accordingly)
            </summary>
        </member>
        <member name="M:Harbin.Common.TypeSafeEnums.TypeSafeEnumsQueryExtensions.WhereEnumIn``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.ICollection{``1})">
            <summary>
            Filters by the Type-Safe Enum value. Filter records in which enum IS IN the given LIST
            </summary>
            <typeparam name="E">Entity being filtered</typeparam>
            <typeparam name="TSE">Type-Safe Enum class</typeparam>
            <typeparam name="U">Type-Safe Enum Underlying Key</typeparam>
            <param name="entities">Entities to filter. E.g. IQueryable{BusinessEntityContact}</param>
            <param name="entityPropertySelector">Should point from an entity to a TypeSafeEnum property. E.g. "c => ContactTypeEnum"</param>
            <param name="values">Should give the list of <typeparamref name="TSE"/> records for comparison. E.g. new ContactTypeEnum[] { ContactTypeEnum.ACCOUNTING_MANAGER, ContactTypeEnum.ASSISTANT_SALES_AGENT } </param>
            <returns></returns>
        </member>
        <member name="M:Harbin.Common.TypeSafeEnums.TypeSafeEnumsQueryExtensions.WhereEnumNotIn``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.ICollection{``1})">
            <summary>
            Filters by the Type-Safe Enum value. Filter records in which enum is NOT IN the given LIST
            </summary>
            <typeparam name="E">Entity type which being filtered</typeparam>
            <typeparam name="TSE">Type-Safe Enum class</typeparam>
            <typeparam name="U">Type-Safe Enum Underlying Key</typeparam>
            <param name="entities">Entities to filter. E.g. IQueryable{BusinessEntityContact}</param>
            <param name="entityPropertySelector">Should point from an entity to a TypeSafeEnum property. E.g. "c => ContactTypeEnum"</param>
            <param name="values">Should give the list of <typeparamref name="TSE"/> records for comparison. E.g. new ContactTypeEnum[] { ContactTypeEnum.ACCOUNTING_MANAGER, ContactTypeEnum.ASSISTANT_SALES_AGENT } </param>
            <returns></returns>
        </member>
        <member name="M:Harbin.Common.TypeSafeEnums.TypeSafeEnumsQueryExtensions.WhereEnum``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,Harbin.Common.TypeSafeEnums.TypeSafeEnum{``1,``2}}},System.Func{``1,System.Boolean})">
            <summary>
            Filters by the Type-Safe Enum value. Filter according to any condition
            </summary>
            <typeparam name="E">Entity type which being filtered</typeparam>
            <typeparam name="TSE">Type-Safe Enum class</typeparam>
            <typeparam name="U">Type-Safe Enum Underlying Key</typeparam>
            <param name="entities">Entities to filter. E.g. IQueryable{BusinessEntityContact}</param>
            <param name="entityPropertySelector">Should point from an entity to a TypeSafeEnum property. E.g. "c => ContactTypeEnum"</param>
            <param name="predicate">Filter condition. E.g. "ct => ct.SomeProperty==true"</param>
            <returns></returns>
        </member>
        <member name="M:Harbin.Common.TypeSafeEnums.TypeSafeEnumsQueryHelper.CreateInExpression``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.ICollection{``1})">
            <summary>
            Generates a IN (list.Contains(value)) Expression, which translates into SQL for Entity Framework
            </summary>
        </member>
        <member name="M:Harbin.Common.TypeSafeEnums.TypeSafeEnumsQueryHelper.CreateNotInExpression``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.ICollection{``1})">
            <summary>
            Generates a NOT IN (!list.Contains(value)) Expression, which translates into SQL for Entity Framework
            </summary>
        </member>
        <member name="M:Harbin.Common.TypeSafeEnums.TypeSafeEnumsQueryHelper.CreateExpression``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Generates a IN (list.Contains(value)) Expression based on the predicate, which translates into SQL for Entity Framework
            </summary>
        </member>
        <member name="M:Harbin.Common.TypeSafeEnums.TypeSafeEnumsQueryHelper.Unwrap``3(System.Linq.Expressions.Expression{System.Func{``0,Harbin.Common.TypeSafeEnums.TypeSafeEnum{``1,``2}}})">
            <summary>
            Converts a selector from Entity E to TypeSafeEnum{TSE, U} to a selector from Entity E to TSE.
            E.g. from "((BusinessEntityContact)e) => e.ContactTypeEnum", 
            </summary>
            <typeparam name="E">Entity type</typeparam>
            <typeparam name="TSE">Type-Safe Enum class</typeparam>
            <typeparam name="U">Type-Safe Enum Underlying Key</typeparam>
        </member>
        <member name="T:Harbin.Common.TypeSafeEnums.TypeSafeEnumWrapperAttribute">
            <summary>
            Apply this to TypeSafeEnums, pointing to the underlying property, so that EF Filter Extensions can filter by the Enum translating into a filter on the underlying property
            </summary>
        </member>
    </members>
</doc>
